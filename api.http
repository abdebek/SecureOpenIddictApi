### Enhanced OpenIddict API Test Suite
### Supports all OAuth 2.0 flows: Password, Client Credentials, Authorization Code, Refresh Token

@baseUrl = https://localhost:7236
@clientId = postman
@clientSecret = postman-secret
@webClientId = web-client
@username = admin@test.com
@password = AdminPassword123!

### 1. User Registration
POST {{baseUrl}}/register
Content-Type: application/json

{
  "email": "newuser@test.com",
  "password": "NewPassword123!",
  "firstName": "New",
  "lastName": "User"
}

### 2. Password Flow (Resource Owner Password Credentials)
POST {{baseUrl}}/connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=password&client_id={{clientId}}&client_secret={{clientSecret}}&username={{username}}&password={{password}}&scope=openid profile email api

### 3. Client Credentials Flow (Machine-to-Machine)
POST {{baseUrl}}/connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials&client_id={{clientId}}&client_secret={{clientSecret}}&scope=api

### 4. Authorization Code Flow - Step 1: Get Authorization Code
# ### using a test pkce endpoint - TODO
# Get {{baseUrl}}/test/pkce


### Open this URL in browser (replace with actual values):
### https://localhost:7236/connect/authorize?response_type=code&client_id=web-client&redirect_uri=https://localhost:7236/callback.html&scope=openid profile email api&state=random_state_123&code_challenge=CODE_CHALLENGE&code_challenge_method=S256

### 4a. Authorization Code Flow - Step 2: Exchange Code for Token
### (Use the authorization code from step 1)
POST {{baseUrl}}/connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&client_id={{webClientId}}&code=AUTHORIZATION_CODE_HERE&redirect_uri=https://localhost:7236/callback.html&code_verifier=CODE_VERIFIER_HERE

### 5. Get User Information (use access token from any flow above)
GET {{baseUrl}}/connect/userinfo
Authorization: Bearer ACCESS_TOKEN_HERE

### 6. Refresh Token Flow (use refresh token from password or auth code flow)
POST {{baseUrl}}/connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&client_id={{clientId}}&client_secret={{clientSecret}}&refresh_token=REFRESH_TOKEN_HERE

### 7. Token Introspection (check if token is active)
POST {{baseUrl}}/connect/introspect
Content-Type: application/x-www-form-urlencoded
Authorization: Basic {{base64(clientId:clientSecret)}}

token=ACCESS_TOKEN_HERE

### 8. Token Revocation (invalidate token)
POST {{baseUrl}}/connect/revoke
Content-Type: application/x-www-form-urlencoded
Authorization: Basic {{base64(clientId:clientSecret)}}

token=ACCESS_TOKEN_HERE&token_type_hint=access_token

### 9. OpenID Connect Discovery Document
GET {{baseUrl}}/.well-known/openid_configuration

### 10. Test Error Cases

### 10a. Invalid Password
POST {{baseUrl}}/connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=password&client_id={{clientId}}&client_secret={{clientSecret}}&username={{username}}&password=wrongpassword&scope=openid profile email api

### 10b. Invalid Client
POST {{baseUrl}}/connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=password&client_id=invalid_client&client_secret=invalid_secret&username={{username}}&password={{password}}&scope=openid profile email api

### 10c. Invalid Grant Type
POST {{baseUrl}}/connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=invalid_grant&client_id={{clientId}}&client_secret={{clientSecret}}

###
### NOTES:
###
### For Authorization Code Flow with PKCE:
### 1. Generate code_verifier (43-128 characters)
### 2. Create code_challenge = BASE64URL(SHA256(code_verifier))
### 3. Use code_challenge in authorization URL
### 4. Use code_verifier in token exchange
###
### Example PKCE values for testing:
### code_verifier: dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
### code_challenge: E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM
###
### Web Client Test Flow:
### 1. Open https://localhost:7236 in browser
### 2. Click "Login with OpenIddict"
### 3. Login with admin@test.com / AdminPassword123!
### 4. Grant consent if required
### 5. View user information
###